; PlatformIO Project Configuration File
;
;      Build options: build flags, source filter
;     Upload options: custom upload port, speed and extra flags
;    Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;      Documentation: https://docs.platformio.org/page/projectconf.html
;
; Common Problems/Fixes
;
; - Show Computed Configuration:
;     $> pio project config
;
; - Code Completion/Linting (clang) Errors:
;   - PlatformIO: Rebuild IntelliSense Index
;   - Generate 'compile_commands.json':
;       $> pio run --target compiledb
;   - Download LLVM (clang* tools):
;       https://releases.llvm.org/download.html
;   - VSCode Extensions:
;     - ms-vscode.cpptools (comes with PlatformIO)
;     - llvm-vs-code-extensions.vscode-clangd (ignore warnings or disable)
;   - VSCode Extensions Settings (or use supplied "settings.json"):
;     - Set C_Cpp.clang_format_path if non-standard path
;     - Set C_Cpp.codeAnalysis.clangTidy.path if non-standard path
;     - "C_Cpp.codeAnalysis.clangTidy.enabled": true,
;     - "C_Cpp.default.compileCommands": "compile_commands.json",
;     - "C_Cpp.default.cppStandard": "gnu++20",
;     - "C_Cpp.default.cStandard": "gnu17",
;
; Notes
;
;   - Config is targeted towards ESP32.
;   - Use 'extends' for non ESP32 platforms like ESP32S3, RPi, ESP8266, etc.
;   - Inherit common config (${env.*}) when changing/adding options
;   - Clone branch and set package folder name to "name"
;       name=https://github.com/user/repo.git#branch
;
; WiFiManager = https://github.com/mostorer/WiFiManager.git#feature_asyncwebserver ; works also for ESP32
;

[platformio]
name         = iohcESP32
description  = io-homecontrol for the ESP32
default_envs = heltec_wifi_lora_32_V2
data_dir     = extras ; Contents and Filesystem folder. Arduino standard is 'extras'.


;   GLOBAL OPTIONS FOR ALL ENVIRONMENTS [env:*]
[env]
framework = arduino
platform  = espressif32
;
;   GLOBAL BUILD OPTIONS
board_build.filesystem = littlefs
build_unflags = -std=gnu++11 -Os ; required for map lib to use "insert_or_assign()"
build_flags   = -std=gnu++2a -O3 ; required to set >gnu++17 for map lib to use "insert_or_assign()"
                ;-I include
                -DWM_MDNS
                -DCONFIG_ESP_WIFI_TASK_PINNED_TO_CORE_1=y
                -DCONFIG_ESP_TIMER_PROFILING=y
                -DCONFIG_ESP_TIMER_SUPPORTS_ISR_DISPATCH_METHOD=y ; check if MQTT+WIFI works: can set IRAM callback
                -DCMAKE_EXPORT_COMPILE_COMMANDS=1                 ; clangd.llvm.org/installation#project-setup
;
;   GLOBAL LIBRARY OPTIONS
lib_compat_mode = soft  ; check environment compatibility against manifest (library.*)
lib_ldf_mode    = deep+ ; parse sources and dependencies recursively
;                 Global Environment Dependencies
lib_deps        = bblanchon/ArduinoJson
                  https://github.com/HeMan/async-mqtt-client.git
;
;   GLOBAL UPLOAD OPTIONS
upload_speed    = 921600
;
;   GLOBAL MONITOR OPTIONS
monitor_speed   = 115200
monitor_echo    = yes
monitor_eol     = LF
monitor_filters = default                 ; remove typical control codes
                  colorize                ; colored output
                  esp32_exception_decoder ; crash exception decoder
                  send_on_enter           ; send text on ENTER
                  time                    ; add timestamp
;
;   GLOBAL CHECK OPTIONS
check_skip_packages = yes                 ; exclude third-party package checks or checks fail
check_tool          = clangtidy, cppcheck
check_flags         = clangtidy: --format-style=file --fix-errors
;                     https://sourceforge.net/p/cppcheck/wiki/ListOfChecks
                      cppcheck: --enable=style --std=c++20
check_severity      = high                ; high=Bugs | medium=Defensive | low=Cleanup/Performance


;   DEBUG OPTIONS
[env:debug]
build_type        = debug                 ; avoid project rebuild on debug
;   DEBUG BUILD OPTIONS
build_flags       = ${env.build_flags}    ; inherit option
                    -DCORE_DEBUG_LEVEL=4  ; 0=None, 1=Error, 2=Warn, 3=Info, 4=Debug, 5=Verbose
; debug_build_flags = -O0 -ggdb3 -g3      ; override for even more debug output
;
;   DEBUG MONITOR OPTIONS
; targets         = upload, monitor        ; build -> upload -> show serial monitor
; monitor_filters = ${env.monitor_filters} ; inherit option
;                   debug                  ; print all sent and received


;   ESP32 PLATFORM OPTIONS (usage: 'extends = platform_espressif32')
[platform_espressif32]
platform           = espressif32
;   ESP32 PLATFORM MANIFEST OPTIONS (board_*)
board_build.f_cpu  = 240000000L ; cpu frequency: 240MHz
board_connectivity = wifi       ; untested: disable bluetooth, can, ethernet
board_frameworks   = arduino    ; untested: disable espidf

;   ESP32 LATEST PLATFORM OPTIONS (usage: 'extends = platform_espressif32_latest')
;     Uses the first major PlatformIO update since a long time:
;     - Compiler: xtensa-esp32 @ 12.2.0 (was 8.4 .. finally normal usage of newer C/C++ features)
;     - ESP-IDF @ 5.1.3 (was 4.4)
;     - Arduino for ESP32 @ 3.0.0-RC1
[platform_espressif32_latest] ; ==> ATTENTION: Does NOT work which is caused by the mqtt libs
extends = platform_espressif32
platform_packages = framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#3.0.0-rc1
                    framework-arduinoespressif32-libs @ https://github.com/espressif/esp32-arduino-libs.git#idf-release/v5.1
;   ESP32 PLATFORM MANIFEST OPTIONS (board_*)
build_flags       = ${env.build_flags}
                    -std=gnu++2b -O3   ; use C++23 + GNU extensions


;   BOARD OPTIONS: Heltec WiFi LoRa 32 (V2) - heltec_wifi_lora_32_V2.json
;                  https://docs.platformio.org/en/latest/boards/espressif32/heltec_wifi_lora_32_V2.html
[env:heltec_wifi_lora_32_V2]
extends     = platform_espressif32
board       = heltec_wifi_lora_32_V2
board_url   = https://resource.heltec.cn/download/WiFi_LoRa_32 ; correct board manifest url
build_flags = ${env.build_flags}
              -DHELTEC

;   BOARD OPTIONS: TTGO LoRa32-OLED v2.1.6 - ttgo-lora32-v21.json
;                  https://docs.platformio.org/en/latest/boards/espressif32/ttgo-lora32-v21.html
[env:ttgo-lora32-v21]
extends     = platform_espressif32
board       = ttgo-lora32-v21
build_flags = ${env.build_flags}
              -DLILYGO
